#ifdef GL_ES
#define LOWP lowp
precision mediump float;
#else
#define LOWP
#endif
varying LOWP vec4 v_color;
varying vec2 v_texCoords;
uniform float iGlobalTime;
uniform float lightX;
uniform float lightY;
uniform float lightZ;
uniform float lightR;
uniform float lightG;
uniform float lightB;
uniform float lightRadius;
uniform float screenWidth;
uniform float screenHeight;
uniform sampler2D u_texture;
uniform sampler2D u_texture2;
void main()
{
    vec3 image    = texture2D( u_texture, v_texCoords.xy ).rgb;
    vec3 position = vec3( screenWidth * v_texCoords.x, screenHeight * v_texCoords.y, 0 );
    vec3 normal   = normalize(texture2D( u_texture2, v_texCoords.xy ).rgb * 2.0 - 1.0);

    vec3 light          = vec3(lightX, lightY, lightZ);
    vec3 lightVector    = light - position;
    vec3 lightDir       = normalize(lightVector);

    vec3 cameraPos        = vec3( screenWidth * 0.5, screenHeight * 0.5, 100);
    vec3 eyeDir           = vec3( position - cameraPos );

    float diffuseStrength = max(0,dot(normal,lightDir));
    vec3 diffuseLight     = diffuseStrength * vec3(lightR,lightG,lightB) * image;

    vec3 reflectionVector   = normalize(reflect(-lightDir, normal));
    float specularPower     = 0.1;
    float specularIntensity = 0.5;
    float specularLight     = specularIntensity * pow( clamp(dot(reflectionVector, eyeDir),0.0,1.0), specularPower);

    float attenuation     = clamp(1.0 - (length(lightVector) / lightRadius), 0.0, 1.0);
    float lightIntensity  = 1.0;

    gl_FragColor =
          attenuation * lightIntensity * vec4(diffuseLight.rgb,specularLight);
}
